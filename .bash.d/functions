#!/bin/bash

_clip_or_arg() {
    local cmd="$1"
    if (( $# > 1 )); then
        for i in "${@:2}"; do
            if ((use_stdin)); then
                $cmd <<< "$i"
            else
                $cmd "$i"
            fi
        done
    else
        if ((use_stdin)); then
            xsel --output | $cmd
        else
            $cmd "$(xsel --output)"
        fi
    fi
}

awk-calc() {
    awk "BEGIN{print $*}"
}

bigpkgs() {
    expac --query '%n\t%m' |
        awk '{
            s[$1] = $2
        }
        END {
            PROCINFO["sorted_in"] = "@val_num_asc"
            for(i in s)
                printf("%7d %s\n", s[i]/2^10, i)
        }'
}

brsrv() {
    makemkvcon stream --cache=128 dev:/dev/sr0
}

brcli() {
    [[ $1 =~ ^-(h|-help)$ ]] && {
        echo "Usage: brcli [episode] [port]"
        return 0
    }
    local ep="${1:-0}"
    local port="${2:-51000}"
    mpv --cache=4096 --sid=1 "http://localhost:${port}/stream/title${ep}.m2ts"
}

flush-caches() {
    sync && sudo sysctl --write vm.drop_caches=3
}

fix-permissions() {
    if [[ -d "$1" ]]; then
        find "$1" -type d -exec chmod 755 {} \+
        find "$1" -type f -exec chmod 644 {} \+
    else
        echo "$1 is not a directory"
    fi
}

folder2mp3() {
    (($#)) || {
        echo "Error: no arguments"
        return 1
    }
    for i in "$@"; do
        [[ -d "$i" ]] || {
            echo "Error: \"$i\" is not a directory"
            return 1
        }
    done
    find "$@" -type f -name "*.flac" -print0 |
        parallel --no-notice --null flac2mp3
}

last_installed() {
    expac --query '%l %n' --timefmt '%s' | awk '
        {
            pkg[$2] = $1
        }
        END {
            PROCINFO["sorted_in"] = "@val_num_asc"
            for(i in pkg) {
                print i
            }
        }'
}

lowercase() {
    for x in *; do
        mv "$x" "${x,,}"
    done
}

myip() {
    curl icanhazip.com
}

net-summon() {
    while :; do
        ping -c 1 google.com 2> /dev/null &&
            eject && eject --trayclose && break
    done
}

nocomments() {
    awk '!/^[ \t]*(#|$)/' "$@"
    #perl -ne '/^\s*(#|$)/ or print;' "$@"
}

qemu-livecd() {
    [[ -f "$1" ]] || return 1
    qemu-system-x86_64 -m 512 -vga std -boot d -cdrom "$1"
}

random_password() {
    local pwsize="${1:-16}"
    [[ "$pwsize" =~ ^[[:digit:]]+$ ]] || {
        echo "Error: $pwsize is not a number"
        return 1
    }
    echo "$(tr --complement --delete [:alnum:] < /dev/urandom |
        head --bytes "$pwsize")"
}

rot13_dec() {
    local use_stdin=1
    _clip_or_arg "tr 'A-Za-z' 'N-ZA-Mn-za-m'" "$@"
}

share() {
    python2 -m SimpleHTTPServer
}

sprunge() {
    curl --form 'sprunge=<-' 'http://sprunge.us'
}

vacuum-firefox() {
    find ~/.mozilla -type f -name \*.sqlite -exec sqlite3 {} vacuum \; \
        -exec sqlite3 {} reindex \;
}

yadl() {
    _clip_or_arg "yle-dl --vfat --sublang all" "$@"
}

ytdl() {
    # currently youtube-dl can't get the best quality by itself
    # so we have to to use --format
    # https://github.com/rg3/youtube-dl/issues/3165
    # https://en.wikipedia.org/wiki/Youtube#Quality_and_codecs
    _clip_or_arg "youtube-dl --continue --youtube-include-dash-manifest \
        --format 137+141/137+172/248+141/248+172/best " "$@"
}

ytmp3() {
    local cmd="youtube-dl --continue --extract-audio "
    local cmd+="--audio-format mp3 --audio-quality 0"
    _clip_or_arg "$cmd" "$@"
}

ytst() {
    _clip_or_arg "mpv --really-quiet --cache=auto" "$@"
}
